{"version":3,"sources":["components/img/ObiWan.webp","components/Search.js","components/People.js","components/Planets.js","components/Species.js","components/Starships.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Search","useState","newCategory","setNewCategory","newID","setNewID","allPeople","onSubmit","e","preventDefault","navigate","htmlFor","id","onChange","target","value","onClick","console","log","type","PeopleDisplay","people","setPeople","homeworld","setHomeworld","validPerson","setValidPerson","planetID","setPlanetID","useEffect","fetch","then","response","json","hasOwnProperty","planetid","url","split","length","catch","err","name","height","mass","hair_color","skin_color","eye_color","birth_year","gender","to","src","ObiWan","PlanetsDisplay","planet","setPlanet","validPlanet","setValidPlanet","rotation_period","orbital_period","diameter","climate","gravity","terrain","population","SpeciesDisplay","species","setSpecies","validSpecies","setValidSpecies","classification","designation","average_height","skin_colors","hair_colors","eye_colors","average_lifespan","language","StarshipDisplay","ship","setShip","validShip","setValidShip","model","manufacturer","cost_in_credits","max_atmosphering_speed","crew","passengers","cargo_capacity","consumables","App","className","People","path","Planets","Species","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.d656ee64.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/ObiWan.05f6d1b6.webp\";","import React, { useState, useEffect } from 'react';\r\nimport { navigate } from '@reach/router';\r\n\r\nconst Search = () =>{\r\n    const [newCategory, setNewCategory] = useState(\"people\");\r\n    const [newID, setNewID] = useState(\"\");\r\n    const [allPeople, setAllPeople] = useState([]);\r\n\r\n    const handleSubmit = (e) =>{\r\n        e.preventDefault();\r\n        navigate(`/${newCategory}/${newID}`)\r\n    }\r\n// Can use this next line to grab the names of people to later map a dropdown box\r\n    // useEffect(() =>{\r\n    //     fetch(`https://swapi.dev/api/people/`)\r\n    //         .then(response => {\r\n    //             return response.json();\r\n    //         })\r\n    //         .then(response => {\r\n    //             console.log(response);\r\n    //             setAllPeople(response.results);\r\n    //         })\r\n    // }, [])\r\n\r\n    const showAllPeople = () =>{\r\n        console.log(allPeople);\r\n    }\r\n\r\n    return(\r\n        <form onSubmit = {handleSubmit}>\r\n            <label htmlFor=\"category\">Search for: </label>\r\n            <select id=\"category\" onChange={(e) => setNewCategory(e.target.value)}>\r\n                <option value=\"people\">People</option>\r\n                <option value=\"starships\">Starships</option>\r\n                <option value=\"species\">Species</option>\r\n                <option value=\"planets\">Planet</option>\r\n            </select>\r\n            <button onClick={showAllPeople}>Click me</button>\r\n            {/* <select id=\"allPeople\">\r\n                {\r\n                    allPeople.map((person, i) =>\r\n                    <option value=\"person\">{person.name}</option>\r\n                    )\r\n                }\r\n            </select> */}\r\n            <label htmlFor=\"ID\">ID: </label>\r\n            <input type=\"number\" id=\"ID\" onChange={(e) => setNewID(e.target.value)}></input>\r\n            <button>Search</button>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default Search;","import React, { useEffect, useState } from 'react';\r\nimport ObiWan from './img/ObiWan.webp';\r\nimport { Link } from '@reach/router';\r\n\r\nconst PeopleDisplay = ({id}) => {\r\n    const [people, setPeople] = useState('');\r\n    const [homeworld, setHomeworld] = useState(true);\r\n    const [validPerson, setValidPerson] = useState(true);\r\n    const [planetID, setPlanetID] = useState('');\r\n\r\n    useEffect(() =>{\r\n        fetch(`https://swapi.dev/api/people/${id}`)\r\n            .then(response => {\r\n                return response.json();\r\n            })\r\n            .then(response => {\r\n                    setPeople(response)\r\n                    return response\r\n            })\r\n            .then(response => {\r\n                if(response.hasOwnProperty('detail')){\r\n                    setValidPerson(false)\r\n                }\r\n                else{\r\n                    setValidPerson(true)\r\n                    return response;\r\n                }\r\n            })\r\n            .then(response => {\r\n                return fetch(response.homeworld);\r\n            })\r\n            .then(response => {\r\n                return response.json();\r\n            })\r\n            .then(response =>{\r\n                setHomeworld(response);\r\n                return response;\r\n            })\r\n            .then(response =>{\r\n                let planetid = response.url.split('/')\r\n                setPlanetID(planetid[planetid.length-2])\r\n            })\r\n            .catch(err => {\r\n                setValidPerson(false)\r\n            })\r\n    }, [id]);\r\n\r\n    return(\r\n        <div>\r\n            {\r\n                validPerson?\r\n                    <div>\r\n                        <p>Name: {people.name}</p>\r\n                        <p>Height: {people.height} cm</p>\r\n                        <p>Mass: {people.mass} kg</p>\r\n                        <p>Hair Color: {people.hair_color}</p>\r\n                        <p>Skin Color:{people.skin_color}</p>\r\n                        <p>Eye Color: {people.eye_color}</p>\r\n                        <p>Birth Year: {people.birth_year}</p>\r\n                        <p>Gender: {people.gender}</p>\r\n                        <p>Homeworld: <Link to ={`/planets/${planetID}`}>{homeworld.name}</Link></p>\r\n                    </div>:\r\n                    <div>\r\n                        <h1>These aren't the droids you're looking for</h1>\r\n                        <img src={ObiWan}></img>\r\n                    </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PeopleDisplay;","import React, { useEffect, useState } from 'react';\r\nimport ObiWan from './img/ObiWan.webp';\r\n\r\nconst PlanetsDisplay = ({id}) =>{\r\n    const [planet, setPlanet] = useState('');\r\n    const [validPlanet, setValidPlanet] = useState(true);\r\n\r\n    useEffect(() =>{\r\n        console.log(\"Hello\")\r\n        fetch(`https://swapi.dev/api/planets/${id}`)\r\n            .then(response => {\r\n                return response.json();\r\n            })\r\n            .then(response => {\r\n                    setPlanet(response)\r\n                    return response\r\n            })\r\n            .then(response => {\r\n                if(response.hasOwnProperty('detail')){\r\n                    setValidPlanet(false)\r\n                }\r\n                else{\r\n                    setValidPlanet(true)\r\n                }\r\n            })\r\n            .catch(err => {\r\n                setValidPlanet(false)\r\n            })\r\n    }, [id]);\r\n\r\n    return(\r\n        <div>\r\n            {\r\n                validPlanet?\r\n                    <div>\r\n                        <p>Name: {planet.name}</p>\r\n                        <p>Rotation Period: {planet.rotation_period}</p>\r\n                        <p>Orbital Period: {planet.orbital_period}</p>\r\n                        <p>Diameter: {planet.diameter}</p>\r\n                        <p>Climate: {planet.climate}</p>\r\n                        <p>Gravity: {planet.gravity}</p>\r\n                        <p>Terrain: {planet.terrain}</p>\r\n                        <p>Population: {planet.population}</p>\r\n                    </div>:\r\n                    <div>\r\n                        <h1>These aren't the droids you're looking for</h1>\r\n                        <img src={ObiWan}></img>\r\n                    </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default PlanetsDisplay;","import React, { useEffect, useState } from 'react';\r\nimport ObiWan from './img/ObiWan.webp';\r\n\r\nconst SpeciesDisplay = ({id}) =>{\r\n    const [species, setSpecies] = useState('');\r\n    const [validSpecies, setValidSpecies] = useState(true);\r\n    \r\n    useEffect(() =>{\r\n        console.log(\"Hello\")\r\n        fetch(`https://swapi.dev/api/species/${id}`)\r\n            .then(response => {\r\n                return response.json();\r\n            })\r\n            .then(response => {\r\n                    setSpecies(response)\r\n                    return response\r\n            })\r\n            .then(response => {\r\n                if(response.hasOwnProperty('detail')){\r\n                    setValidSpecies(false)\r\n                }\r\n                else{\r\n                    setValidSpecies(true)\r\n                }\r\n            })\r\n            .catch(err => {\r\n                setValidSpecies(false)\r\n            })\r\n    }, [id]);\r\n\r\n    return(\r\n        <div>\r\n            {\r\n                validSpecies?\r\n                    <div>\r\n                        <p>Name: {species.name}</p>\r\n                        <p>Classification: {species.classification}</p>\r\n                        <p>Designation: {species.designation}</p>\r\n                        <p>Average Height: {species.average_height} cm</p>\r\n                        <p>Skin Colors: {species.skin_colors}</p>\r\n                        <p>Hair Colors: {species.hair_colors}</p>\r\n                        <p>Eye Colors: {species.eye_colors}</p>\r\n                        <p>Average Lifespan: {species.average_lifespan} years</p>\r\n                        <p>Language: {species.language}</p>\r\n                    </div>:\r\n                    <div>\r\n                        <h1>These aren't the droids you're looking for</h1>\r\n                        <img src={ObiWan}></img>\r\n                    </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SpeciesDisplay;","import React, { useEffect, useState } from 'react';\r\nimport ObiWan from './img/ObiWan.webp';\r\n\r\nconst StarshipDisplay = ({id}) =>{\r\n    const [ship, setShip] = useState('');\r\n    const [validShip, setValidShip] = useState('');\r\n\r\n    useEffect(() =>{\r\n        console.log(\"Hello\")\r\n        fetch(`https://swapi.dev/api/starships/${id}`)\r\n            .then(response => {\r\n                return response.json();\r\n            })\r\n            .then(response => {\r\n                    setShip(response)\r\n                    return response\r\n            })\r\n            .then(response => {\r\n                if(response.hasOwnProperty('detail')){\r\n                    setValidShip(false)\r\n                }\r\n                else{\r\n                    setValidShip(true)\r\n                }\r\n            })\r\n            .catch(err => {\r\n                setValidShip(false)\r\n            })\r\n    }, [id]);\r\n\r\n    return(\r\n        <div>\r\n            {\r\n                validShip?\r\n                <div>\r\n                    <p>Name: {ship.name}</p>\r\n                    <p>Model: {ship.model}</p>\r\n                    <p>Manufacturer: {ship.manufacturer}</p>\r\n                    <p>Cost: {ship.cost_in_credits} credits</p>\r\n                    <p>Length: {ship.length} meters</p>\r\n                    <p>Max Atmospheric Speed: {ship.max_atmosphering_speed} kph</p>\r\n                    <p>Crew: {ship.crew}</p>\r\n                    <p>Passengers: {ship.passengers}</p>\r\n                    <p>Cargo Capacity: {ship.cargo_capacity/1000} metric tons</p>\r\n                    <p>Consumables: {ship.consumables}</p>\r\n                </div>:\r\n                <div>\r\n                    <h1>These aren't the droids you're looking for</h1>\r\n                    <img src={ObiWan}></img>\r\n                </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default StarshipDisplay;","import React from 'react';\nimport './App.css';\nimport Search from './components/Search'\nimport { Router } from '@reach/router';\nimport PeopleDisplay from './components/People';\nimport PlanetsDisplay from './components/Planets';\nimport SpeciesDisplay from './components/Species';\nimport StarshipDisplay from './components/Starships';\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      <Search />\n      <Router>\n        <PeopleDisplay path=\"/people/:id\" />\n        <PlanetsDisplay path=\"/planets/:id\"/>\n        <SpeciesDisplay path=\"/species/:id\"/>\n        <StarshipDisplay path=\"/starships/:id\"/>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}